// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(value: uuid()) @db.Uuid
  firstName          String               @db.VarChar(255)
  middleName         String               @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  password           String               @db.VarChar(255)
  type               String               @db.VarChar(125)
  activationCode     String?              @db.VarChar(255)
  verifiedAt         DateTime?
  createdAt          DateTime             @default(value: now())
  Group              Group[]
  Subject            Subject[]
  Classes            Classes[]
  StudyPlan          StudyPlan[]
  CriteriaEvaluation CriteriaEvaluation[]

  @@map("user")
}

model Subject {
  id        String   @id @default(value: uuid()) @db.Uuid()
  name      String   @db.VarChar(255)
  alias     String?  @db.VarChar(255)
  isActive  Boolean  @default(value: true)
  teacherId String   @db.Uuid()
  createdAt DateTime @default(value: now())

  teacher   User        @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  Classes   Classes[]
  StudyPlan StudyPlan[]

  @@map("subject")
}

model Group {
  id          String   @id @default(value: uuid()) @db.Uuid()
  name        String   @db.VarChar(255)
  course      Int?
  subGroup    Int      @default(value: 1)
  description String?  @db.VarChar(255)
  isActive    Boolean  @default(value: false)
  createdBy   String   @db.Uuid
  createdAt   DateTime @default(value: now())

  created User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  Student Student[]
  Classes Classes[]

  @@map("group")
}

model Student {
  id         String   @id @default(value: uuid()) @db.Uuid()
  firstName  String   @db.VarChar(255)
  middleName String   @db.VarChar(255)
  lastName   String?  @db.VarChar(255)
  groupId    String   @db.Uuid
  isActive   Boolean  @default(value: true)
  createdAt  DateTime @default(value: now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("student")
}

model Classes {
  id        String   @id @default(value: uuid()) @db.Uuid
  groupId   String   @db.Uuid
  subjectId String   @db.Uuid
  teacherId String   @db.Uuid
  isActive  Boolean  @default(value: true)
  createdAt DateTime @default(value: now())

  teacher User    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("classes")
}

model StudyPlan {
  id          String   @id @default(value: uuid()) @db.Uuid
  subjectId   String   @db.Uuid
  topic       String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  order       Int
  createdAt   DateTime @default(value: now())
  createdBy   String   @db.Uuid

  author  User    @relation(fields: [createdBy], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@map("study-plan")
}

model CriteriaEvaluation {
  id            String   @id @default(value: uuid()) @db.Uuid
  studyPlanItem String?  @db.Uuid
  name          String   @db.VarChar(255)
  coefficient   Int
  createdAt     DateTime @default(value: now())
  createdBy     String   @db.Uuid

  author User @relation(fields: [createdBy], references: [id])

  @@map("criteria-evaluation")
}
